{
	"info": {
		"_postman_id": "d12390c4-a5c0-4be6-aaef-1e1daf77f024",
		"name": "NGSI-LD Extended Properties",
		"description": "# Understanding JSON-LD `@keywords`\n\nThe [JSON-LD syntax](https://www.w3.org/TR/json-ld/#syntax-tokens-and-keywords) defines a series of keywords to describe the structure of the JSON displayed. Since **NGSI-LD** is just a formally structured _extended subset_ of **JSON-LD**, **NGSI-LD** should be  \ndirectly or indirectly capable of offering an equivalent for all the functions defined by JSON-LD.\n\nAs an example, JSON-LD defines `@id` to indicate the unique identifier of an Entity, and `@type` to define the type of an Entity.  \nThe NGSI-LD core `@context` further refines this further, so that `id`/`@id` and `type`/`@type` are considered as interchangable.\n\nBoth of the following syntaxes (with and without `@`) are acceptable in NGSI-LD:\n\n``` json\n{\n  \"id\": \"urn:ngsi-ld:Building:farm001\",\n  \"type\": \"Building\",\n  \"@context\": \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.7.jsonld\"\n}\n\n ```\n\n``` json\n{\n  \"@id\": \"urn:ngsi-ld:Building:farm001\",\n  \"@type\": \"Building\",\n  \"@context\": \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.7.jsonld\"\n}\n\n ```\n\nAmong the keywords defined in JSON-LD, the following terms are used or mapped within the NGSI-LD core `@context` to maintain their meaning when JSON-LD data is supplied.\n\n- `@list` - Used to express an ordered set of data.\n    \n- `@json` - Used in association with unexpandable JSON objects\n    \n- `@language` - Used to specify the language for a particular string value or string array\n    \n- `@none` - Used as a default index value, when an attribute does not have the feature being indexed.\n    \n- `@value` - Used to specify the data that is associated with a particular property\n    \n- `@vocab` - Used to expand properties and values\n    \n\nCertain other keywords such as `@graph`, which describe statements about relationships are accepted in NGSI-LD, but are never processed directly by NGSI-LD Context brokers\n\nFor example. Looking at the core `@context`, the GeoProperty attribute  \n`coordinates` is fully defined as:\n\n``` json\n\"coordinates\": {\n  \"@container\": \"@list\",\n  \"@id\": \"geojson:coordinates\"\n}\n\n ```\n\nThis ensure that the ordering of the values in its array (longitude, latitude) is always maintained.\n\nAll ordinary NGSI-LD **Properties** (and **GeoProperties**) have a `value`, which is the equivalent of a JSON-LD `@value` - this mean that the `value` of a Property is just the data that is associated with a particular property.\n\nHowever, there are recent updates to the NGSI-LD specification which have introduced various extensions or sub-classes to this principle, allowing the creation of NGSI-LD properties which directly conform to  \nJSON-LD keywords other than `@value`.\n\n- An NGSI-LD **LanguageProperty** holds a set of internationalized strings and is defined using the JSON-LD `@language` keyword.\n    \n- An NGSI-LD **VocabularyProperty** holds is a mapping of a URI to a value within the user'`@context` and is defined using the JSON-LD `@vocab` keyword.\n    \n\nIn each case, the meaning of the resultant payload will be altered according to the standard JSON-LD definitions, so the output NGSI-LD remains fully valid JSON-LD.\n\n## Entities within a Farm Management Information System (FMIS)\n\nTo illustrate some extended NGSI-LD properties within an FMIS system based on NGSI-LD, we will alter the previously defined **Building** Entity type. As a reminder this has been defined as follows\n\n- A building, such as a barn, is a real world bricks and mortar construct. **Building** entities would have properties  \n    such as:\n    \n    - A name of the building e.g. \"The Big Red Barn\"\n        \n    - The category of the building (e.g. \"barn\")\n        \n    - An address \"Friedrichstraße 44, 10969 Kreuzberg, Berlin\"\n        \n    - A physical location e.g. _52.5075 N, 13.3903 E_\n        \n    - A filling level - the degree to which the building is full.\n        \n    - A temperature - e.g. _21 °C_\n        \n    - An association to the owner of the building (a real person)\n        \n    - ...etc.\n        \n\nTaking the first attribute, the Property `name` could be localized into multiple languages, for example:\n\n- **Big Red Barn** in English\n    \n- **Große Rote Scheune** in German\n    \n- **大きな赤い納屋** in Japanese\n    \n\nSimilarly, even if all participants in a data space can agree for a common URI for the definition of the enumerations of all the different building types within `category`, internally within their own systems, they may be requied to display these enumerations with their own localised values.\n\nFor example if the FMIS follows the URIs defined by openstreetmap.org. A building designated as A _\"barn\"_ would actually be be defined by the URI: `https://wiki.openstreetmap.org/wiki/Tag:building=barn`. A JSON-LD `@context` could be used to shorten this as required.\n\nIf a user wanted the `category` defined as `\"barn\"` internally within their system, the following JSON-LD `@context` could be used:\n\n``` json\n{\n  \"@context\": {\n    \"barn\": \"https://wiki.openstreetmap.org/wiki/Tag:building=barn\"\n  }\n}\n\n ```\n\nIf a user wanted the `category` defined as `\"scheune\"` internally within their system, the following JSON-LD `@context` could be used:\n\n``` json\n{\n  \"@context\": {\n    \"scheune\": \"https://wiki.openstreetmap.org/wiki/Tag:building=barn\"\n  }\n}\n\n ```\n\nThe definition and redefinition of enumerations is not necessarily just a language localisation issue. It is possible that an FMIS may wish to use a separate code  \nlist of values for  \nregulatory reasons. For example, the names of ingredients within a pesticide,  \ncould be regulated by law and the required name could differ based on the market in which the product is sold (e.g. `Water`, `H₂O`, `Hydrogen Hydroxide`, `Oxygen Dihydride`,  \n`Hydric Acid`)\n\n# Architecture\n\nThe demo application will send and receive NGSI-LD calls to a compliant context broker. Although the standardised NGSI-LD  \ninterface is available across multiple context brokers, we only need to pick one - for example the  \n[Scorpio Broker](https://fiware-orion.readthedocs.io/en/latest/). The application will therefore only make use of  \none FIWARE component.\n\nCurrently, the Orion Context Broker relies on open source [MongoDB](https://www.mongodb.com/) technology to hold the  \ncurrent state of the context data it contains and persistent information relevant to subscriptions and registrations.  \nOther Context Brokers such as Scorpio or Stellio are using [PostgreSQL](https://www.postgresql.org/) for state  \ninformation.\n\nTo promote interoperability of data exchange, NGSI-LD context brokers explicitly expose a  \n[JSON-LD <code>@context</code> file](https://json-ld.org/spec/latest/json-ld/#the-context) to define the data held within the  \ncontext entities. This defines a unique URI for every entity type and every attribute so that other services outside of  \nthe NGSI domain are able to pick and choose the names of their data structures. Every `@context` file must be available  \non the network. In our case the tutorial application will be used to host a series of static files.\n\nTherefore, the architecture will consist of three elements:\n\n- The [Scorpio Context Broker](https://scorpio.readthedocs.io/) which will receive requests using  \n    [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/rep/NGSI-LD/NGSI-LD/raw/master/spec/updated/generated/full_api.json)\n    \n- The underlying [Postgres](https://www.postgresql.org/) database:\n    \n    - Used by the Scorpio Context Broker to hold context data information such as data entities, subscriptions and  \n        registrations.\n        \n- An HTTP **Web-Server** which offers static `@context` files defining the context entities within the system.\n    \n\nSince all interactions between the three elements are initiated by HTTP requests, the elements can be containerized and  \nrun from exposed ports.\n\nThe necessary configuration information can be seen in the services section of the associated `scorpio.yml` file:\n\n``` yaml\nscorpio:\n  labels:\n    org.fiware: \"tutorial\"\n  image: quay.io/fiware/scorpio:java-${SCORPIO_VERSION}\n  hostname: scorpio\n  container_name: fiware-scorpio\n  networks:\n    - default\n  ports:\n    - \"1026:9090\"\n  depends_on:\n    - postgres\n\n ```\n\n``` yaml\npostgres:\n  labels:\n    org.fiware: \"tutorial\"\n  image: postgis/postgis\n  hostname: postgres\n  container_name: db-postgres\n  networks:\n    - default\n  ports:\n    - \"5432\"\n  environment:\n    POSTGRES_USER: ngb\n    POSTGRES_PASSWORD: ngb\n    POSTGRES_DB: ngb\n  logging:\n    driver: none\n  volumes:\n    - postgres-db:/var/lib/postgresql/data\n\n ```\n\n``` yaml\nld-context:\n  labels:\n    org.fiware: \"tutorial\"\n  image: httpd:alpine\n  hostname: context\n  container_name: fiware-ld-context\n  ports:\n    - \"3004:80\"\n  volumes:\n    - data-models:/usr/local/apache2/htdocs/\n  healthcheck:\n    test: (wget --server-response --spider --quiet  http://ld-context/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}'|  grep -q -e \"200\") || exit 1\n\n ```\n\nAll containers reside on the same network - the Scorpop Context Broker is listening on Port `9090` internally and `1026` externally and PostGres is  \nlistening on the default port `5432` and the httpd web server is offering `@context` files on port `80`. All containers  \nare also exposing ports externally - this is purely for the tutorial access - so that cUrl or Postman can access them  \nwithout being part of the same network. The command-line initialization should be self-explanatory.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "513743",
		"_collection_link": "https://fiware.postman.co/workspace/NGSI-LD-tutorials~60157bf9-a93f-4c6e-90d1-0917133c1872/collection/513743-d12390c4-a5c0-4be6-aaef-1e1daf77f024?action=share&source=collection_link&creator=513743"
	},
	"item": [
		{
			"name": "Reading @Context",
			"item": [
				{
					"name": "Obtain the NGSI-LD Linked Data context",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3004/ngsi-context.jsonld",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3004",
							"path": [
								"ngsi-context.jsonld"
							]
						},
						"description": "This example retrieves the user `@context`. The User **NGSI-LD** `@context` serves to define all attributes when sending data to the context broker or retrieving data in _normalized_ format. This `@context` must be used for all **NGSI-LD** to **NGSI-LD** interactions"
					},
					"response": []
				},
				{
					"name": "Obtain an alternate Linked Data context",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3004/alternate-context.jsonld",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3004",
							"path": [
								"alternate-context.jsonld"
							]
						},
						"description": "This example retrieves an alternative `@context` file.\n\n`alternate-context.jsonld ` is an alternative  \n**JSON-LD** definition of the attributes of the data models used by a third-party. In this case we have a German speaking customer who wishes to have all attribute names and enumerations to be defined using terminology common in the German language. Effectively, internally within their their billing application a different set of short names for attributes is used. Their `@context` file reflects  \nthe agreed mapping between attribute names."
					},
					"response": []
				}
			],
			"description": "Two `@context` files have been generated and hosted on the tutorial application. They would be used by different organizations within the data space, and internally they define the names of attributes and enumerations in different ways.\n\nThe full data model description for a **Building** entity as used in this tutorial is based on the standard [Smart Data Models definition](https://github.com/smart-data-models/dataModel.Building/tree/master/Building). A [Swagger Specification ](https://petstore.swagger.io/?url=https://smart-data-models.github.io/dataModel.Building/Building/swagger.yaml) of the same model is also available, and would be used to generate code stubs in a full application."
		},
		{
			"name": "Working with multilanguage properties",
			"item": [
				{
					"name": "Creating your first Data Entity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"urn:ngsi-ld:Building:farm001\",\n    \"type\": \"Building\",\n    \"category\": {\n        \"type\": \"VocabularyProperty\",\n        \"vocab\": [\n            \"farm\"\n        ]\n    },\n    \"address\": {\n        \"type\": \"Property\",\n        \"value\": {\n            \"streetAddress\": \"Großer Stern 1\",\n            \"addressRegion\": \"Berlin\",\n            \"addressLocality\": \"Tiergarten\",\n            \"postalCode\": \"10557\"\n        },\n        \"verified\": {\n            \"type\": \"Property\",\n            \"value\": true\n        }\n    },\n    \"location\": {\n        \"type\": \"GeoProperty\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [\n                13.3505,\n                52.5144\n            ]\n        }\n    },\n    \"name\": {\n        \"type\": \"LanguageProperty\",\n        \"languageMap\": {\n            \"en\": \"Victory Farm\",\n            \"de\": \"Bauernhof von Sieg\",\n            \"ja\": \"ビクトリーファーム\"\n        }\n    },\n    \"@context\": \"http://context/ngsi-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							]
						},
						"description": "This example creates an entity with a **LanguageProperty** and a **VocabularyProperty**\n\nLet's create a farm **Building** entity in which we want to make the `name` available in three different languages, _English_, _German_, and _Japanese_. The process will be to  \nsend a **POST** request to the Broker with the following information."
					},
					"response": []
				},
				{
					"name": "Creating your Second Data Entity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"urn:ngsi-ld:Building:barn002\",\n    \"type\": \"Building\",\n    \"category\": {\n        \"type\": \"VocabProperty\",\n        \"vocab\": [\n            \"barn\"\n        ]\n    },\n    \"address\": {\n        \"type\": \"Property\",\n        \"value\": {\n            \"streetAddress\": \"Straße des 17. Juni\",\n            \"addressRegion\": \"Berlin\",\n            \"addressLocality\": \"Tiergarten\",\n            \"postalCode\": \"10557\"\n        },\n        \"verified\": {\n            \"type\": \"Property\",\n            \"value\": true\n        }\n    },\n    \"location\": {\n        \"type\": \"GeoProperty\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [\n                13.3698,\n                52.5163\n            ]\n        }\n    },\n    \"name\": {\n        \"type\": \"LanguageProperty\",\n        \"languageMap\": {\n            \"@none\": \"The Big Red Barn\",\n            \"en\": \"Big Red Barn\",\n            \"de\": \"Große Rote Scheune\",\n            \"ja\": \"大きな赤い納屋\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							]
						},
						"description": "This example creates a second entity with a **LanguageProperty** and a **VocabularyProperty**\n\nEach subsequent entity must have a unique `id` for the given `type`. Note that within a `languageMap`, the `@none` simplified pair indicates the default fallback value to be displayed for unknown languages."
					},
					"response": []
				},
				{
					"name": "Reading multilingual data (normalised)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Building:farm001?attrs=name",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Building:farm001"
							],
							"query": [
								{
									"key": "attrs",
									"value": "name"
								}
							]
						},
						"description": "This example retrieves a **LanguageProperty** in normalized format.\n\nIf we want to get `name` of a specific entity (`urn:ngsi-ld:Building:farm001`) in normalised  \nformat and without any reference to the language that we want to obtain the data. We should execute the following  \ncommand.\n\nAnd the response that we obtain the whole `languageMap` including all the string values defined for the different languages:"
					},
					"response": []
				},
				{
					"name": "Reading a Specified Language (normalised)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Building:farm001?attrs=name&lang=de",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Building:farm001"
							],
							"query": [
								{
									"key": "attrs",
									"value": "name"
								},
								{
									"key": "lang",
									"value": "de"
								}
							]
						},
						"description": "This example retrieves a single language from a **LanguageProperty** in normalized format.\n\nIf we decided to specify that we wanted to receive the value (or values) but only in _German_  \nlanguage, we should specify the corresponding query parameter `lang` equal to `de`.\n\nIn this case, the response provides a new sub-attribute `lang` with the details of the language that was selected (`\"lang\": \"de\"`) together with the sub-attribute `value` with the content of the string in the corresponding _German_ language. It is  \nimportant to notice that in this response the value of `type` is now _Property_ and there is no `LanguageMap` but `value` sub-attribute."
					},
					"response": []
				},
				{
					"name": "Reading Simplified Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Building:farm001?attrs=name&format=simplified",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Building:farm001"
							],
							"query": [
								{
									"key": "attrs",
									"value": "name"
								},
								{
									"key": "type",
									"value": "Store",
									"description": "Entity type, to avoid ambiguity in case there are several entities with the same entity id",
									"disabled": true
								},
								{
									"key": "format",
									"value": "simplified"
								}
							]
						},
						"description": "This example retrieves a **LanguageProperty** in simplified key-values format.\n\nIf we wanted to get the response in simplified format, we need to send the corresponding request parameter `format`  \nequal to `simplified.`\n\nNote that `format=simplified` could also be specified as `option=simplified` or using the alias `keyValues`.\n\nThe **Language Property** is returned within the `languageMap` attribute."
					},
					"response": []
				},
				{
					"name": "Reading a single Language String (simplified))",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Building:farm001?attrs=name&format=simplified&lang=en",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Building:farm001"
							],
							"query": [
								{
									"key": "attrs",
									"value": "name"
								},
								{
									"key": "format",
									"value": "simplified"
								},
								{
									"key": "lang",
									"value": "en"
								}
							]
						},
						"description": "This example retrieves a single language string from a **LanguageProperty** in simplified format.\n\nif we wanted to get only the corresponding value of the `name` in **English** language,  \nthe `lang=en` parameter must be present in the request.\n\nIn this case, the **Language Property** is returned as an ordinary **Property** and only  \nthe value of the _English_ string is returned. Sub attributes are not returned in the simplified format."
					},
					"response": []
				},
				{
					"name": "Fallback for an unsupported Language (@none default))",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Building:barn002?attrs=name&lang=fr",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Building:barn002"
							],
							"query": [
								{
									"key": "attrs",
									"value": "name"
								},
								{
									"key": "lang",
									"value": "fr"
								}
							]
						},
						"description": "This example retrieves a single language from a **LanguageProperty** in normalized format.\n\nNot all languages will necessarily be present within a `languageMap`. If an unsupported language (like _French_ `lang=fr`) is requested, the context broker will try its best to return some data in an alternate language instead. The preferred default is the `@none` language, but if this is not present, any other language can be returned.\n\nFor `urn:ngsi-ld:Building:barn002` return the name of the enity in _French_ by adding the `lang=fr` parameter\n\nSince **French** is not a supported language for this Entity, but a default alternative is present (as indicated by the `@none` attribute), the default `@none` value is returned. The **Language Property** is returned as an ordinary **Property** and only the value of the default string is returned."
					},
					"response": []
				},
				{
					"name": "Fallback for an unsupported (without default)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Building:farm001?attrs=name&lang=fr",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Building:farm001"
							],
							"query": [
								{
									"key": "attrs",
									"value": "name"
								},
								{
									"key": "lang",
									"value": "fr"
								}
							]
						},
						"description": "This example retrieves a single language from a **LanguageProperty** in normalized format.\n\nFor `urn:ngsi-ld:Building:farm001` return the name of the entity in _French_ by adding the `lang=fr` parameter.\n\nSince _French_ is not a supported language, and not default alternative is present (as indicated by the `@none` attribute), another value in the set is returned, in this case the string in **English** as shown by the `\"@lang\": \"en\"` sub-property.\n\nOnce again the **Language Property** is returned as an ordinary **Property** and only the value of the _English_ string is returned."
					},
					"response": []
				},
				{
					"name": "Querying for Specific Language",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"name": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/?type=Building&attrs=name&q=name[en]==%22Big%20Red%20Barn%22",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Building"
								},
								{
									"key": "attrs",
									"value": "name"
								},
								{
									"key": "lang",
									"value": "en",
									"disabled": true
								},
								{
									"key": "q",
									"value": "name[en]==%22Big%20Red%20Barn%22"
								}
							]
						},
						"description": "This example queries a single language from a **LanguageProperty** in normalized format.\n\nUse the standard Object attribute bracket `[ ]` notation when querying individual languages within `LanguageProperties`. For example, if we want to  \nobtain the Building whose name is equal to `Big Red Barn` in _English_."
					},
					"response": []
				},
				{
					"name": "Querying across Multilingual Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"name": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/?type=Building&attrs=name&q=name[*]==%22Big%20Red%20Barn%22",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Building"
								},
								{
									"key": "attrs",
									"value": "name"
								},
								{
									"key": "lang",
									"value": "en",
									"disabled": true
								},
								{
									"key": "q",
									"value": "name[*]==%22Big%20Red%20Barn%22"
								}
							]
						},
						"description": "This example queies all languages from a **LanguageProperty** in normalized format.\n\nNow, I wanted to receive the response but corresponding to `Big Red Barn` in _Any_ language:  \nUsing the Asterisk Syntax `\\*` to check for data in all available languages."
					},
					"response": []
				}
			],
			"description": "Sometimes, it is required to localize strings to offer variations for different languages in the creation and consumption of Entity data. In order to proceed, we need to create initially a new entity data that defines the new data type `LanguageProperty` and use the sub-attribute `LanguageMap` (and not `value`) to keep the representation of the values of this attribute in different languages.\n\nThis `LanguageMap` corresponds to a JSON object consisting of a series of simplified pairs where the keys shall be JSON  \nstrings representing [IETF RFC 5646](https://www.rfc-editor.org/info/rfc5646) language codes."
		},
		{
			"name": "Enumerations and using an alternative `@context`",
			"item": [
				{
					"name": "Attributes and Values without `@context`",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/?type=https://uri.fiware.org/ns/dataModels%23Building&attrs=https://uri.fiware.org/ns/dataModels%23category",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "https://uri.fiware.org/ns/dataModels%23Building"
								},
								{
									"key": "attrs",
									"value": "https://uri.fiware.org/ns/dataModels%23category"
								}
							]
						},
						"description": "This example retrieves an Entity with a **VocabularyProperty** without using a defined User `@context`.\n\nThis means that internally the long URIs for the `category` are being used, as can be proven by making a request without adding a User `@context`.\n\nAs can be seen, two Building entities are returned with the long names for all the attributes, and in the case of a `vocab` for the attribute value as well.  \nTerms defined in the core context (such as `id`, `type`, `vocab` and `VocabularyProperty`) are not  \nexpanded, as the core context is implied as a default."
					},
					"response": []
				},
				{
					"name": "Attributes and values with `@context`",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/?type=Building&attrs=category",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Building"
								},
								{
									"key": "attrs",
									"value": "category"
								}
							]
						},
						"description": "This example retrieves an Entity with a **VocabularyProperty** using a defined User `@context`.\n\nIf the `ngsi-context.jsonld` `@context` is included as a `Link` header in the request, the response will convert all the attribute names to short names, and in the case of a **VocabularyProperty**, use the short names for the value (`vocab`)as well.\n\nIn the response the categories `farm` and `barn` are used."
					},
					"response": []
				},
				{
					"name": "Attributes and values with alternate `@context`",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{alternate-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/?type=Gebäude&attrs=kategorie",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Gebäude"
								},
								{
									"key": "attrs",
									"value": "kategorie"
								}
							]
						},
						"description": "This example retrieves an Entity with a **VocabularyProperty** using an alternate User `@context`.\n\nThe `alternate-context.jsonld` `@context` file maps all the terms and enumerations to the names in German as shown:\n\n``` json\n{\n  \"@context\": {\n    \"type\": \"@type\",\n    \"id\": \"@id\",\n    \"ngsi-ld\": \"https://uri.etsi.org/ngsi-ld/\",\n    \"fiware\": \"https://uri.fiware.org/ns/dataModels#\",\n    \"Gebäude\": \"fiware:Building\",\n    \"scheune\": \"https://wiki.openstreetmap.org/wiki/Tag:building=barn\",\n    \"kategorie\": \"fiware:category\",\n    \"bauernhof\": \"https://wiki.openstreetmap.org/wiki/Tag:building=farm\"\n  }\n}\n\n ```\n\nWhen `alternate-context.jsonld` included as a `Link` header in the request, the response will convert all the attribute names to short names used in `alternate-context.jsonld`, and in the case of a **VocabularyProperty**, return the short names for the value as well.\n\nIn the response the category attribute is renamed `kategorie` and the values `bauernhof` and `scheune` are used. The shortname of the Entity `type` has also been amended."
					},
					"response": []
				},
				{
					"name": "Simplified key-values enumeration",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{alternate-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/?type=Gebäude&attrs=kategorie",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Gebäude"
								},
								{
									"key": "attrs",
									"value": "kategorie"
								}
							]
						},
						"description": "This example retrieves an Entity with a **VocabularyProperty** in simplified format.\n\nTo make a key-values or simplified request, include the `format=simplified'` parameter.\n\nThe simplified response retains the `vocab` attribute (which implies that the right-hand side of the `category` attribute can be re-expanded using JSON-LD `@vocab`)"
					},
					"response": []
				},
				{
					"name": "Querying enumerations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"type": "text",
								"value": "<{{json-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/?type=Building&q=address%5BaddressLocality%5D==\"Tiergarten\"&options=keyValues",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Building"
								},
								{
									"key": "q",
									"value": "address%5BaddressLocality%5D==\"Tiergarten\""
								},
								{
									"key": "options",
									"value": "keyValues",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
								}
							]
						},
						"description": "This example queries for a `type` of Entity with a **VocabularyProperty**\n\nWhen querying using the `q` parameter, also include the `expandValues` parameter to indicate which attributes in the query are **VocabularyProperties**"
					},
					"response": []
				}
			],
			"description": "The User's `@context` is a mechanism for mapping URNs and defining the Entities held within  \nthe system It is therefore possible to retrieve _the same__data_ using a different set of short names for the attributes, and in the case of a **VocabularyProperty**, different short names for the values of the attributes themselves. This is particularly useful when dealing with distributed data, federations and data spaces as the end user many not have full control of data held within another participant's context broker.\n\nWhen the **Building** entities were created, we used an `@context` file called `ngsi-context.jsonld`.  \nWithin the `ngsi-context.jsonld` file, we have already mapped many terms as shown:\n\n``` json\n{\n  \"@context\": {\n    \"type\": \"@type\",\n    \"id\": \"@id\",\n    \"ngsi-ld\": \"https://uri.etsi.org/ngsi-ld/\",\n    \"fiware\": \"https://uri.fiware.org/ns/dataModels#\",\n    \"Building\": \"fiware:Building\",\n    \"barn\": \"https://wiki.openstreetmap.org/wiki/Tag:building=barn\",\n    \"category\": \"fiware:category\",\n    \"farm\": \"https://wiki.openstreetmap.org/wiki/Tag:building=farm\"\n  }\n}\n\n ```"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "json-context.jsonld",
			"value": "http://context/json-context.jsonld"
		},
		{
			"key": "ngsi-context.jsonld",
			"value": "http://context/ngsi-context.jsonld"
		},
		{
			"key": "context-broker",
			"value": "localhost:1026"
		},
		{
			"key": "alternate-context.jsonld",
			"value": "http://context/alternate-context.jsonld"
		}
	]
}